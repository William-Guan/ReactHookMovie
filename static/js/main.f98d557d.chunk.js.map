{"version":3,"sources":["components/Header.js","components/Movie.js","components/Search.js","components/Detail.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Movie","movie","poster","Poster","Title","src","width","alt","Year","Search","useState","searchValue","setSearchValue","value","onChange","e","target","type","onClick","preventDefault","search","Detail","id","useParams","setMovie","useEffect","fetch","then","resposne","json","jsonResponse","Plot","initialState","loading","movies","errorMessage","reducer","state","action","console","log","payload","error","App","useReducer","dispatch","response","exact","path","Response","Error","map","index","to","imdbID","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f98d557d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = props => {\r\n  return (\r\n    <header className=\"App-header\">\r\n      <h2>{props.text}</h2>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst DEFAULT_PLACEHOLDER_IMAGE =\r\n  \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\r\n\r\nconst Movie = ({ movie }) => {\r\n  const poster =\r\n    movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\r\n  return (\r\n    <div className=\"movie\">\r\n      <h2>{movie.Title}</h2>\r\n      <div>\r\n        <img src={poster} width=\"200\" alt={`The movie tilte: ${movie.Title}`} />\r\n      </div>\r\n      <p>{movie.Year}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Search = props => {\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n\r\n  const handleSearchInputChage = e => {\r\n    setSearchValue(e.target.value);\r\n  };\r\n\r\n  const resetInputField = () => {\r\n    setSearchValue(\"\");\r\n  };\r\n\r\n  const callSearchFunction = e => {\r\n    e.preventDefault();\r\n    props.search(searchValue);\r\n    resetInputField();\r\n  };\r\n\r\n  return (\r\n    <form className=\"search\">\r\n      <input\r\n        value={searchValue}\r\n        onChange={handleSearchInputChage}\r\n        type=\"text\"\r\n      />\r\n      <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst Detail = props => {\r\n  let { id } = useParams();\r\n  const [movie, setMovie] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetch(`http://www.omdbapi.com/?apikey=b5236c5c&i=${id}`)\r\n      .then(resposne => resposne.json())\r\n      .then(jsonResponse => {\r\n        setMovie(jsonResponse);\r\n      });\r\n  });\r\n\r\n  return (\r\n    <div className=\"detail\">\r\n      <h2>{movie.Title}</h2>\r\n      <div>\r\n        <img width=\"400\" src={movie.Poster} alt=\"poster\" />\r\n      </div>\r\n      <p>{movie.Plot}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Detail;\r\n","import React, { useReducer, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport Movie from \"./components/Movie\";\nimport Search from \"./components/Search\";\nimport Detail from \"./components/Detail\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=b5236c5c\";\n\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\nconst reducer = (state, action) => {\n  console.log(action);\n  switch (action.type) {\n    case \"SEARCH_MOVIE_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIE_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIE_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        dispatch({\n          type: \"SEARCH_MOVIE_SUCCESS\",\n          payload: jsonResponse.Search\n        });\n      });\n  }, []);\n\n  const search = searchValue => {\n    dispatch({\n      type: \"SEARCH_MOVIE_REQUEST\"\n    });\n\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=b5236c5c`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === \"True\") {\n          dispatch({\n            type: \"SEARCH_MOVIE_SUCCESS\",\n            payload: jsonResponse.Search\n          });\n        } else {\n          dispatch({\n            type: \"SEARCH_MOVIE_FAILURE\",\n            error: jsonResponse.Error\n          });\n        }\n      });\n  };\n\n  const { movies, errorMessage, loading } = state;\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Header text=\"Hooked\" />\n            <Search search={search} />\n            <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n            <div className=\"movies\">\n              {loading && !errorMessage ? (\n                <span>loading...</span>\n              ) : errorMessage ? (\n                <div className=\"errorMessage\">{errorMessage}</div>\n              ) : (\n                movies.map((movie, index) => (\n                  <Link to={`/detail/${movie.imdbID}`}>\n                    <Movie key={`${index}-${movie.Title}`} movie={movie} />\n                  </Link>\n                ))\n              )}\n            </div>\n          </Route>\n\n          <Route path=\"/detail/:id\">\n            <Header text=\"Hooked\" />\n            <Detail />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}